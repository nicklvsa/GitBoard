/// <reference types="node" />
import { EventEmitter } from 'events';
import * as HID from 'node-hid';
import { DeviceModelId } from '../models';
import { KeyIndex, StreamDeckDeviceInfo } from './id';
export interface OpenStreamDeckOptions {
    useOriginalKeyOrder?: boolean;
}
export interface StreamDeckProperties {
    MODEL: DeviceModelId;
    COLUMNS: number;
    ROWS: number;
    ICON_SIZE: number;
    KEY_DIRECTION: 'ltr' | 'rtl';
}
export interface StreamDeck {
    readonly NUM_KEYS: number;
    readonly KEY_COLUMNS: number;
    readonly KEY_ROWS: number;
    readonly ICON_SIZE: number;
    readonly ICON_BYTES: number;
    readonly MODEL: DeviceModelId;
    /**
     * Fills the given key with a solid color.
     *
     * @param {number} keyIndex The key to fill
     * @param {number} r The color's red value. 0 - 255
     * @param {number} g The color's green value. 0 - 255
     * @param {number} b The color's blue value. 0 -255
     */
    fillColor(keyIndex: KeyIndex, r: number, g: number, b: number): void;
    /**
     * Fills the given key with an image in a Buffer.
     *
     * @param {number} keyIndex The key to fill
     * @param {Buffer} imageBuffer
     */
    fillImage(keyIndex: KeyIndex, imageBuffer: Buffer): void;
    /**
     * Fills the whole panel with an image in a Buffer.
     *
     * @param {Buffer} imageBuffer
     */
    fillPanel(imageBuffer: Buffer): void;
    /**
     * Clears the given key.
     *
     * @param {number} keyIndex The key to clear
     */
    clearKey(keyIndex: KeyIndex): void;
    /**
     * Clears all keys.
     */
    clearAllKeys(): void;
    /**
     * Sets the brightness of the keys on the Stream Deck
     *
     * @param {number} percentage The percentage brightness
     */
    setBrightness(percentage: number): void;
    /**
     * Resets the display to the startup logo
     */
    resetToLogo(): void;
    /**
     * Get firmware version from Stream Deck
     */
    getFirmwareVersion(): string;
    /**
     * Get serial number from Stream Deck
     */
    getSerialNumber(): string;
    on(event: 'down' | 'up', listener: (keyIndex: KeyIndex) => void): any;
    on(event: 'error', listener: (e: any) => void): any;
}
export declare abstract class StreamDeckBase extends EventEmitter implements StreamDeck {
    readonly NUM_KEYS: number;
    readonly KEY_COLUMNS: number;
    readonly KEY_ROWS: number;
    readonly ICON_SIZE: number;
    readonly ICON_BYTES: number;
    readonly MODEL: DeviceModelId;
    protected device: HID.HID;
    private deviceProperties;
    private keyState;
    constructor(deviceInfo: StreamDeckDeviceInfo, properties: StreamDeckProperties, dataKeyOffset: number);
    fillColor(keyIndex: KeyIndex, r: number, g: number, b: number): void;
    fillImage(keyIndex: KeyIndex, imageBuffer: Buffer): void;
    fillPanel(imageBuffer: Buffer): void;
    clearKey(keyIndex: KeyIndex): void;
    clearAllKeys(): void;
    setBrightness(percentage: number): void;
    resetToLogo(): void;
    getFirmwareVersion(): string;
    getSerialNumber(): string;
    protected abstract transformKeyIndex(keyIndex: KeyIndex): KeyIndex;
    protected abstract convertFillImage(imageBuffer: Buffer, sourceOffset: number, sourceStride: number): Buffer;
    protected getFillImageCommandHeaderLength(): number;
    protected writeFillImageCommandHeader(buffer: Buffer, keyIndex: number, partIndex: number, isLast: boolean, _bodyLength: number): void;
    protected abstract getFillImagePacketLength(): number;
    protected generateFillImageWrites(keyIndex: KeyIndex, byteBuffer: Buffer): number[][];
    private fillImageRange;
    private checkValidKeyIndex;
    private checkRGBValue;
}
