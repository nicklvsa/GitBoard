"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jpeg_1 = require("../jpeg");
const util_1 = require("../util");
const base_1 = require("./base");
const id_1 = require("./id");
const xlProperties = {
    MODEL: id_1.DeviceModelId.XL,
    COLUMNS: 8,
    ROWS: 4,
    ICON_SIZE: 96,
    KEY_DIRECTION: 'ltr'
};
class StreamDeckXL extends base_1.StreamDeckBase {
    constructor(deviceInfo) {
        super(deviceInfo, xlProperties, 4);
    }
    /**
     * Sets the brightness of the keys on the Stream Deck
     *
     * @param {number} percentage The percentage brightness
     */
    setBrightness(percentage) {
        if (percentage < 0 || percentage > 100) {
            throw new RangeError('Expected brightness percentage to be between 0 and 100');
        }
        // prettier-ignore
        const brightnessCommandBuffer = [
            0x03, 0x08, percentage, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ];
        this.device.sendFeatureReport(brightnessCommandBuffer);
    }
    resetToLogo() {
        // prettier-ignore
        const resetCommandBuffer = [
            0x03, 0x02
        ];
        this.device.sendFeatureReport(resetCommandBuffer);
    }
    getFirmwareVersion() {
        return util_1.numberArrayToString(this.device.getFeatureReport(5, 32).slice(6));
    }
    getSerialNumber() {
        return util_1.numberArrayToString(this.device.getFeatureReport(6, 32).slice(2));
    }
    transformKeyIndex(keyIndex) {
        return keyIndex;
    }
    getFillImageCommandHeaderLength() {
        return 8;
    }
    writeFillImageCommandHeader(buffer, keyIndex, partIndex, isLast, bodyLength) {
        buffer.writeUInt8(0x02, 0);
        buffer.writeUInt8(0x07, 1);
        buffer.writeUInt8(keyIndex, 2);
        buffer.writeUInt8(isLast ? 1 : 0, 3);
        buffer.writeUInt16LE(bodyLength, 4);
        buffer.writeUInt16LE(partIndex++, 6);
    }
    getFillImagePacketLength() {
        return 1024;
    }
    convertFillImage(sourceBuffer, sourceOffset, sourceStride) {
        const byteBuffer = util_1.imageToByteArray(sourceBuffer, sourceOffset, sourceStride, 0, this.transformCoordinates.bind(this), 'rgba', this.ICON_SIZE);
        return jpeg_1.encodeJPEG(byteBuffer, this.ICON_SIZE, this.ICON_SIZE);
    }
    transformCoordinates(x, y) {
        return { x: this.ICON_SIZE - x - 1, y: this.ICON_SIZE - y - 1 };
    }
}
exports.StreamDeckXL = StreamDeckXL;
