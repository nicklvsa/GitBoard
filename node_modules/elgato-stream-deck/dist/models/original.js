"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const base_1 = require("./base");
const id_1 = require("./id");
const miniProperties = {
    MODEL: id_1.DeviceModelId.ORIGINAL,
    COLUMNS: 5,
    ROWS: 3,
    ICON_SIZE: 72,
    KEY_DIRECTION: 'rtl'
};
class StreamDeckOriginal extends base_1.StreamDeckBase {
    constructor(deviceInfo, options) {
        super(deviceInfo, miniProperties, 1);
        this.useOriginalKeyOrder = !!options.useOriginalKeyOrder;
    }
    transformKeyIndex(keyIndex) {
        if (!this.useOriginalKeyOrder) {
            // Horizontal flip
            const half = (this.KEY_COLUMNS - 1) / 2;
            const diff = ((keyIndex % this.KEY_COLUMNS) - half) * -half;
            return keyIndex + diff;
        }
        else {
            return keyIndex;
        }
    }
    getFillImagePacketLength() {
        return 8191;
    }
    convertFillImage(sourceBuffer, sourceOffset, sourceStride) {
        const byteBuffer = util_1.imageToByteArray(sourceBuffer, sourceOffset, sourceStride, util_1.BMP_HEADER_LENGTH, this.flipCoordinates.bind(this), 'bgr', this.ICON_SIZE);
        util_1.writeBMPHeader(byteBuffer, this.ICON_SIZE, this.ICON_BYTES, 3780);
        return byteBuffer;
    }
    generateFillImageWrites(keyIndex, byteBuffer) {
        const MAX_PACKET_SIZE = this.getFillImagePacketLength();
        const PACKET_HEADER_LENGTH = this.getFillImageCommandHeaderLength();
        // The original uses larger packets, and splits the payload equally across 2
        const packet1Bytes = byteBuffer.length / 2;
        const packet1 = Buffer.alloc(MAX_PACKET_SIZE);
        this.writeFillImageCommandHeader(packet1, keyIndex, 0x01, false, packet1Bytes);
        byteBuffer.copy(packet1, PACKET_HEADER_LENGTH, 0, packet1Bytes);
        const packet2 = Buffer.alloc(MAX_PACKET_SIZE);
        this.writeFillImageCommandHeader(packet2, keyIndex, 0x02, true, packet1Bytes);
        byteBuffer.copy(packet2, PACKET_HEADER_LENGTH, packet1Bytes);
        return [util_1.bufferToIntArray(packet1), util_1.bufferToIntArray(packet2)];
    }
    flipCoordinates(x, y) {
        return { x: this.ICON_SIZE - x - 1, y };
    }
}
exports.StreamDeckOriginal = StreamDeckOriginal;
